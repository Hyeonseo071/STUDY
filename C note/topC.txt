오제이튜브 리눅스 기반 C언어 강의(1강~23강)

1강 

-리눅스를 사용하는 이유
:찾아보니 높은 보안성 및 안정성, 오픈소스가 무료이며 안정적인 구조를 겸비등의 장점이 있기 때문이라고 한다.

- root권한
- 리눅스 명령어 알아두기
(파일 (sudo)mkdir, rm -r ~~(디렉토리 생성 및 삭제), cd OO, cd /, cd ~(위치 옮기기), ls ... 등)
-> cd ~ (home 위치로 가기)

-리눅스는 계정의 ID를 할당해주는 개념이 빡세고 엄격,,
-> 리눅스의 최고 권한(권리자ID) : root ->아이디, 폴더 접근 권한 줌.

디렉토리가 /user인 여기서 cd home/ -> /user/home
			 cd / ->최상위 디렉토리 root로 이동
			 cd ~ ->사용자 user의 홈 디렉토리로 이동(ex:/home/user)
루트권한 -> 수정 및 삭제 가능 / 루트권한 안할시엔 sudo 일일히 붙여줘야 함.
-gcc : 리눅스 운영체제에서의 c 및 c++ 등의 프로그래밍 언어를 컴파일 하는데 사용되는 오픈소스 컴파일러 (프로그램)

apt-get -> PATH -> 로 정의둔 관련 폴더들의 명령어는 무조건적으로 실행 시켜라.....
		=> echo $PATH

apt-get : 우분투. 서버. 프로그래밍 팩키지.

vim : vi 에디터의 업그레이드 버전 => vi가 실무에 의외로 자주 쓰이는 경우가 있다. => 그래서 사용법을 숙지해 두기는 해야함.
_________________________________________________________________

2강 (변수가 이렇게 생긴 이유가 다 있었다.)
https://www.youtube.com/watch?v=hwW9l0N5QdE&list=PLz--ENLG_8TMdMJIwyqDIpcEOysvNoonf&index=3

2강까지도 사실상 학교 수업중에 배운 내용 위주로 나와서 무슨 소린지는 거의 다 알고는 있었지만, 이번 기회에 다시한번 기초 개념을 집고 넘어갈 수 있어서 까먹지 않고 좋은 것 같다.
(예습도 예습이지만 역시 복습이 더 중요하다고 생각함..)

(강의 내용)
> vi와 vim의 차이점(지난 강의에서 한번 짚고 넘어감)

> 변수에 대한 개념 (ex| int, char, float ... 등) 
  ex) (int)변수의 메모리 크기가 4byte인 이유?(데이터를 효율적으로 저장하고 처리하기 위한 것.)
    
-> 컴퓨터 성능향상 노력 중 하나 : 데이터 병렬처리

> 정확한 비트 단위의 발전 : 
컴퓨터는 2의 n승 크기를 사용함으로써 여러 시스템간의 데이터의 이동을 효율적으로 하며, 호환성을 유지할 수 있게 한다.(2의 거듭제곱으로 정의함으로써 서로 다른 시스템 간에 데이터를 쉽게 변환및 이동 가능)
ex) 1byte = 8bit = 256개(0포함) 표현 가능
	(2의 8승 = 256)

**이건 당연하지만 기본 상식임..... 기본적으로 머리에 암기하고 알고 있어야 함--**
아주 초보자들을 중심으로 개념을 설명하는 단계라서 그런가 난이도가 그리 높지 않은듯 하다.

> 아스키 코드의 개념 ('사회적 약속이다!')
  -> 같은 97이지만 출력하고 싶은 '모양' => 정수형인지, 문자형인지 등에 따라 값이 달라짐.
	ex) printf("%d", 97); => 97 / printf("%c", 97); => a
문자형 변수는 1바이트 : ""아스키코드 기준 256가지의 표현으로 충분한 문자 표현 가능""

> long, long long, float의 개념들


>16진수를 많이 쓰는 이유
-> 16진수 자릿수 하나가 2의 4승을 한번에 표현할 수 있기 때문(4비트 단위로 자르기 가능)

1~9까진 10진수처럼 그대로 쓰고, 10~15 => A~F 로 표현

unsigned - : 부호없는 숫자 값.(더 많은 양수값을 표현할 수 있음.)
____________________________________________________________

3강 (상수) <<무료강의
https://www.youtube.com/watch?v=ajoQujYfVl0&list=PLz--ENLG_8TMdMJIwyqDIpcEOysvNoonf&index=4

(강의 내용)
- gdb 디버거 사용할 줄 알아야 하는 이유 :
- 크로스 컴파일을 해야하는 환경에서는 -> 크로스 gdb 디버거가 제공되는 경우가 꽤 있다.

실행하려는 프로그램상에서 (문제) 오류가 발생했을 때, 문제가 일어난 부분을 검토(찾고)하고 수정하기 위해서는 디버깅이 필요하다. 그 디버깅 역할을 하는 것이 바로 gdb이다. 
- 그래서 gdb를 사용할 줄 알아야 한다.

*크로스 컴파일러의 개념 : 컴파일러가 실행되는 플랫폼이 아닌 다른 플랫폼에서 실행 가능한 코드를 생성할 수 있는 컴파일러.

- apt-get install gdb (gdb 설치 명령어)
- gcc -g [실행 파일 이름] // 실행파일 gdb 디버깅 명령어 

**실행 방법**
1.run
2.gdb [프로그램명]

**종료 방법**
1. q
2. ctrl + d

___
gdb로는 디버깅 및 어셈블리소스도 볼 수 있다.
- gdb를 이용한 디어셈블

- 상수 
=> 상수 그 자체값으로 (코드)프로그램 특정 메모리상에 저장되어 있음.(수정(바꾸기)불가능)
(=> 코드영역에 저장.)

**변수명 규칙**
1. 앞에 숫자로 시작 못함.
2. 키워드는 불가능.(ex | if, else, switch .. 등)
3. '-', '.' 사용 불가능(연산자랑 똑같기 때문.)

- sizeof 함수

- const와 define의 차이점? >> const -처음 정의된 이후 값이 바뀌지 X.
				    -변수처럼 취급.
			   >> define -코드상의 모든 #define으로 정의된 영역을 찾아
				->실제 값으로 치환.

-연산자(대입연산자, 기본 연산자)의 개념 및 유의 사항
ex) a=1일때 , 각각 프린드 a++, ++a, a--, --a => a의 값은 " 1 "

까지 -

___________________________________________________________________________________
































