마이크로프로세서-(오제이튜브)임베디드 실시간 강의 필기내용

1강

(컴퓨터 구조의 원리 파악)
1.전기 전자 양자역학
2.반도체, 트렌지스터 (전류가 흐르는 정도를 1 또는 0으로 나타낸 것)
3.2진수 부울대수
4.AND OR NOT 등의 논리 연산자 (->계산기->CPU)
5.컴퓨터 구조 완성

->이건 당연히 알아야 하는 기본 지식이기도 하고 배워서 알고 있는 내용이기에 패스(용어만 적어둠) -
___
**중요한 용어들**

CPU, MPU, MCU, 범용 컴퓨터

->CPU(Central Processing Unit): 중앙처리장치

->MPU(Microprocessor Unit): 중앙처리장치 뿐만 아니라 다양한 주변장치를 통합한 칩셋.

->MCU(Microcontroller Unit): CPU의 핵심 장치와 그 주변 장치들을 하나의 칩으로 포함하고 있는 칩셋.

-범용 컴퓨터 : 다양한 작업수행하는 일반적인 목적의 PC (컴퓨터)
 ___

내가 진로를 설정한 방향인 임베디드 '소프트웨어' 개발자는 설계되고 만들어진 PCB보드에 개발한 소프트웨어를 넣는 역할을 하지만, 
- 장치간의 연결이 잘 되는지를 확인하기 위해서는 임베디드 소프트웨어 개발자도 하드웨어의 정의 및 다루는 법에 대해서 알아야 한다.

- 임베디드 개발자와 타 개발자의 차이점?
=> - 특수한 목적을 가지고 개발
   - 운영체제를 직접 만들고와 안만들고 이미 만들어진 운영체제에서 작업하는 차이.

_____________________________________________________

2강 https://www.youtube.com/watch?v=a8cXa2AhrYI&list=PLz--ENLG_8TNjRg1OtyFBvUyV4PHaKwmu&index=5

Visual Studio Code VS Visual Studio (차이점)

사실 이번 년도에 들어서게 되면서 VS Code 말고도 VS(Visual Studio)라는 것을 새롭게 대면하게 되었다. 그래서 VS Code만을 사용해왔던 초짜인 나는 이 둘의 차이점에 대해 알아 볼 필요가 있었으므로 찾아본 결과.

-> Visual Studio Code : - 독립 파일 편집에 최적화 된, 즉 목적이 소스 코드 편집용 (단순히 편집 기능만 제공한다고 보면 됨.)
			- 컴파일러 포함 X (별도로 컴파일러를 깔아 줘야 함.) (+무료)

-> Visual Studio : 통합개발 환경(IDE) - 소스편집, 검파일(실행) 및 디버깅 등의 역할을 통틀어서
				      - 수행할 수 있는 통합개발환경을 의미한다.(+ 유료)

이런식의 차이점이 있다고 한다. (이렇게 보니 비주얼 스튜디오가 훨 좋은 개발환경으로 보이는 듯.)

___
(~본격적인 강의 내용~)

### 1.칩을 고르는 상황들 ~?   -양산
				->여러가지 조건들에 부합하는 최적의 칩을 선정한다.(ex : 칩의 단가는 적절한가? 안정성이 높은가? 수입성이 있는가? 등의 조건들을 고려.)
			     -개인적인 (일)업부(과제, 수업용 일경우)
				->시간 단축이 가장 중요함.
-> 칩을 선정하는 것도 자신만의 경험을 활용하는 것도 중요함. ->내가 사용해 본적이 있는지. 괜찮은 제품이 있는지.

### 2. 칩에 대한 설명들

- AVR 	->아트멜 사에서 개발한 8비트 마이크로컨트롤러 아키텍처 중 하나이다.(주로 임베디드 시스템 및 펌웨어 개발에 사용됨.)
	->PIC보다 처리 속도 빠름, 자원 풍부
	->ISP지원, C언어에 최적화
- PIC 	-> 마이크로칩 사에서 개발한 MCU(Microcontroller Unit)종류 중 하나이다. 


- ARM(현재는 ARM사가 대세) -> 아키텍처 기반의 중앙 처리 장치 제품.
      -> 제품의 종류(라인업)가 각양 각색 - Cortex-M0, Cortex-M4, Cortex-M0+ 시리즈(초저전력형)
      -> 에너지 효율성, 32bit, 가격 저렴, 소비전력 낮음, CPU설계.

- 쉽게 말하자면, MCU가 하는 역할 중 하나를 **DSP**로 보면 됨.

___

강의를 진행하시면서 드문드문 현(현 이라기엔 2년전이라는 좀 과거의 이야기지만...) 시장의 상황과, 임베디드 개발자라면 알아야 될 기본 제품의 개념의 틀을 크고 세부적으로 알려주셔서 좋은 것 같다.

조금씩 이지만, 이렇게 강의를 매일매일 하나 이상씩 보면서 보고 느낌점을 계속 남겨 볼려고 한다.
오늘은 여기까지 끝 -.

______________________________________________________

### 3강 <<무료 강의
https://www.youtube.com/watch?v=qx4TeywUhPI&list=PLz--ENLG_8TNjRg1OtyFBvUyV4PHaKwmu&index=5

(강의 내용)

- 전기 기본 상식 
->기본 지식을 최소한은 알아야지 일상생활을 살아가는데에 도움이 될 것 이다. 

1. 제품당 견딜(감당 할) 수 있는 전압량이 달라서 그에맞는 아답터를 사용해야한다.(그렇게 하지 않으면 해당 부품은 타버린다.)
(+ 전류가 무엇인지(전하의 흐름), 전압이 무엇인지(전류를 이동을 방해하는 역할))

-> 아답터의 역할 : 전기의 전우너 공급을 위해 전기의 특성을 변환하는 역할을 하는 부품. 
EX)가정에서 공급된 220볼트의 전압을 5볼트 전압으로 낮춰줌.(교류를 직류로 변환)

-> V 적당 및 A 넉넉하게 쓰면 대부분의 부품, 제품은 잘 작동한다.(물론 예외도 있음) 

- 직류 : 일정한 간격의 힘으로 전류의 흐름과 전압이 일정함
- 교류 : (직류와 반대)전류의 흐름과 전압이 바뀜.

-> 모든 전자기기는 직류에서 동작함.

** 교류->직류 = 컨버터 / 직류->교류 = 인버터 라고 한다. **

- W == A * V
- Kwh == A * V * 3600 * 1000
 
- 그라운드와 접지 
=> 그라운드 : "-"(마이너스)
=> 접지 : 통신장비 혹은 전기 설비와 같은 시스템을 대지 즉 지구에 전기적으로 접속시키는 것을 말한다.

**접지**는 대지와 접속하여 전압(전위차)을 없애서 **감전재해가 발생하지 않도록 하는 역할**을 한다.
(찾아보니 접지의 종류도 천차만별이다. 각각의 접지마다 장단점이 있음.
 ex: 신호접지, 대지접지, 섀시접지)

- 마이너스 전압이 가지는 의미(기준점이 -3V가 될 수 있다.)

- 직류와 교류의 차이 다시한번 짚기.
(교류에서는 그라운드의 의미가 있나? >> +는 에너지의 시작, -는 +로 돌아가기.)
교류는 어떻게든 연결해도 괜찮다. 하지만 직류는 플마 신중히 맞게 연결하기.

(퓨즈의 역할 : 일정 이상의 전류가 흐르면 다른 부품들이 타버리지 안토록 전류를 끊는 역할)

쇼트 
-(인터넷 검색) 회로 설계상 접촉되면 안되는 두 도체, 즉 서로간의 부하가 거의 없는 상태에서 전류적으로 접촉되는 현상.

-> 간단히 말해서 쇼트현상이 일어나면 과전류가 흐르게 되며, 그 과전류로 인한 어마무시한 발열이 일어나(전선 및 부품이 탄다.) 화재로 번질 수 있다는 것이다.

**멀티미터(전기 테스터기) 사용이유**

1. 전류, 접압, 저항 측정
2. 쇼트 테스트 가능

_____________________________________________________________________________
3-1강 (개발환경 구축하기)
https://www.youtube.com/watch?v=zFVamoAcE-8&list=PLz--ENLG_8TNjRg1OtyFBvUyV4PHaKwmu&index=6

설치할 항목 => stm32 cube ide
(URL : https://www.st.com/en/development-tools/stm32cubeide.html )

1. 설치하고
2. 압축풀고
3. 실행하면 끝!
__________________________________________________________________________

4강 (GPIO)
https://www.youtube.com/watch?v=YZJ6RfhuGd0&list=PLz--ENLG_8TNjRg1OtyFBvUyV4PHaKwmu&index=7

___
(강의 내용)

환경 구축, 환경 구성을 중심으로 강의 진행 ~~~

### 개발 환경 구축 이란?
#### : 개발을 위해 필요한 모든 소프트웨어 및 하드웨어 장비를 구축하는 것을 의미.
-> 말 그대로 개발을 할 수 있는 환경을 만드는 과정이라고 보면 된다.

환경 구축을 만만하게 보지 말자!(환경 구축은 오래 걸리기 마련이라고 함.)

- 환경 구축이 완료되는 시점?
=> 컴파일 및 출력, 디버깅 /// (다른 요소(단축키, UI등)도 있지만)이 세가지 정도를 중점으로 보자.

- IDE(통합 개발 환경)의 개념과 필요성

- 각 언어 및 운영체제에 따라 쓰이는 IDE가 각각 다르다.
	(JAVA는 이클립스라는 IDE가 있듯이!!)
-> 이클립스를 기반으로 하는 IDE가 꽤 있다고 한답니다.

<< 이 강의에서 쓰는 IDE : stm32 cube IDE >>

(IDE진행) //부품이 따로 없어서 눈으로 보면서 익히는 중.... 나중에 학교에서 따로 제공하는 부품 사용해서 익힐듯...ㅠㅜ

1. IDE 실행 및 프로젝트 생성















